service:
  name: sls-haircuts-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    HAIRCUT_TABLE: Haircuts-${self:provider.stage}
    HAIRCUT_INDEX: HaircutIndex
    HAIRCUT_S3_BUCKET: serverless-haircuts-images-626970730723-${self:provider.stage}

custom: 
  documentation: 
    api: 
      info: 
        version: v1.0.0
        title: Haircut API
        description: Serverless project for haircut appointments

    models: 
      - name: CreateHaircutAppointment
        contentType: application/json
        schema: ${file(models/create-haircut-appointment.json)}
      - name: UpdateHaircutAppointment
        contentType: application/json
        schema: ${file(models/update-haircut-appointment.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetHaircuts:
    handler: src/lambda/http/getHaircuts.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HAIRCUT_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HAIRCUT_TABLE}/index/${self:provider.environment.HAIRCUT_INDEX}
    events:
      - http:
          method: get
          path: haircuts
          cors: true

  CreateHaircuts:
    handler: src/lambda/http/createHaircut.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HAIRCUT_TABLE}
    events:
      - http:
          method: post
          path: haircuts
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create haircut appoinment
            description: Create haircut appointment
            requestModels:
              'application/json': CreateHaircutAppointment

  UpdateHaircut:
    handler: src/lambda/http/updateHaircut.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HAIRCUT_TABLE}
    events:
      - http:
          method: patch
          path: haircuts/{haircutId}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update haircut appointments
            description: Update haircute appointments
            requestModels:
              'application/json': UpdateHaircutAppointment

  DeleteHaircut:
    handler: src/lambda/http/deleteHaircut.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HAIRCUT_TABLE}
    events:
      - http:
          method: delete
          path: haircuts/{haircutId}
          cors: true


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HAIRCUT_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.HAIRCUT_S3_BUCKET}/*
    events:
      - http:
          method: post
          path: haircuts/{haircutId}/attachment
          cors: true

resources:
  Resources:
    HarcutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: haircutId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: haircutId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.HAIRCUT_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.HAIRCUT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    HaircutImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.HAIRCUT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.HAIRCUT_S3_BUCKET}/*'
        Bucket: !Ref HaircutImagesBucket
